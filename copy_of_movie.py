# -*- coding: utf-8 -*-
"""Copy of Movie.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RbviX4acyBCauVWbMmHzTcYhV0Usfisw
"""

import numpy as np
import pandas as pd
import gdown

url = 'https://drive.google.com/uc?id=143uGLfy44nuPUhT-4wuwcdeiNphewexg'
output = 'movies.csv'
gdown.download(url, output, quiet=False)
movies = pd.read_csv(output)

url = 'https://drive.google.com/uc?id=1swdfZG7sfJchtqy1fB-sAQI7CrF84W1N'
output = 'credits.csv'
gdown.download(url, output, quiet=False)
credits = pd.read_csv(output)

movies.head(5)

credits.head(5)

movies=movies.merge(credits,on='title')

movies.head(1)

movies=movies[['title','movie_id','overview','genres','keywords','cast','crew']]

movies.head(1)

movies.isnull().sum()

movies.dropna(inplace=True)

movies.duplicated().sum()

movies.iloc[0].genres

import ast
ast.literal_eval('[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]')

def convert(obj):
  l=[]
  for i in ast.literal_eval(obj):
    l.append(i['name'])
  return l

movies['genres']=movies['genres'].apply(convert)

movies.head(1)

movies.iloc[0].keywords

def convert(obj):
  l=[]
  for i in ast.literal_eval(obj):
    l.append(i['name'])
  return l
movies['keywords']=movies['keywords'].apply(convert)

movies.head(1)

movies.iloc[0].cast

def convert(obj):
  l=[]
  counter=0
  for i in ast.literal_eval(obj):
    if counter<3:
      l.append(i['name'])
      counter+=1
    else:
      break
  return l
movies['cast']=movies['cast'].apply(convert)

movies.head(1)

movies.iloc[0].crew

def convert(obj):
  l=[]
  for i in ast.literal_eval(obj):
    if i['job']=='Director':
      l.append(i['name'])
      break
  return l
movies['crew']=movies['crew'].apply(convert)

movies.head(1)

movies['overview']=movies['overview'].apply(lambda x:x.split())

movies.head(1)

movies['genres']=movies['genres'].apply(lambda x: [i.replace(" ","" )for i in x])

movies['cast']=movies['cast'].apply(lambda x: [i.replace(" ","" )for i in x])

movies['crew']=movies['crew'].apply(lambda x: [i.replace(" ","" )for i in x])

movies.head(1)

movies['keywords']=movies['keywords'].apply(lambda x: [i.replace(" ","" )for i in x])

movies.head(1)

movies['tags']=movies['cast']+movies['crew']+movies['overview']+movies['keywords']

new_df=movies[['title','movie_id','tags']]

new_df.head(5)

new_df['tags']=new_df['tags'].apply(lambda x:" ".join(x))

new_df.head(5)

new_df['tags']=new_df['tags'].apply(lambda x:x.lower())

new_df.head(5)

pip install nltk

import nltk
from nltk.stem.porter import PorterStemmer
ps=PorterStemmer()

ps.stem("loving")

def stem(text):
  y=[]
  for i in text.split():
    y.append(ps.stem(i))
  return " ".join(y)

new_df['tags']=new_df['tags'].apply(stem)

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=5000,stop_words='english')

vectors=cv.fit_transform(new_df['tags']).toarray()

for i in cv.get_feature_names_out():
  print(i)

from sklearn.metrics.pairwise import cosine_similarity

similarity=cosine_similarity(vectors)

similarity

def recommend(movie):
  movie_index=new_df[new_df['title']==movie].index[0]
  distances=similarity[movie_index]
  movies_list=sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]
  for i in movies_list:
    print(new_df.iloc[i[0]].title)

recommend('Batman Begins')

import pickle

pickle.dump(similarity,open('similarity.sav','wb'))